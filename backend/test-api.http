### üöÄ TEST API AUTHENTICATION - ENGLISH WEBSITE

# ========================================
# 1. TEST ƒêƒÇNG K√ù USER
# ========================================
POST http://localhost:3000/api/auth/register
Content-Type: application/json

{
  "username": "testuser1",
  "email": "test1@email.com",
  "password": "123456",
  "fullName": "Test User 1",
  "role": "student"
}

###

# Test ƒëƒÉng k√Ω v·ªõi email kh√°c
POST http://localhost:5000/api/auth/register
Content-Type: application/json

{
  "username": "testuser2",
  "email": "test2@email.com",
  "password": "123456",
  "fullName": "Test User 2",
  "role": "student"
}

###

# Test ƒëƒÉng k√Ω v·ªõi th√¥ng tin thi·∫øu (s·∫Ω b√°o l·ªói)
POST http://localhost:5000/api/auth/register
Content-Type: application/json

{
  "username": "testuser3",
  "email": "test3@email.com"
  // Thi·∫øu password v√† fullName
}

# ========================================
# 2. TEST ƒêƒÇNG NH·∫¨P
# ========================================
POST http://localhost:5000/api/auth/login
Content-Type: application/json

{
  "email": "test1@email.com",
  "password": "123456"
}

###

# Test ƒëƒÉng nh·∫≠p sai password
POST http://localhost:5000/api/auth/login
Content-Type: application/json

{
  "email": "test1@email.com",
  "password": "wrongpassword"
}

###

# Test ƒëƒÉng nh·∫≠p v·ªõi email kh√¥ng t·ªìn t·∫°i
POST http://localhost:5000/api/auth/login
Content-Type: application/json

{
  "email": "nonexistent@email.com",
  "password": "123456"
}

# ========================================
# 3. TEST XEM PROFILE (C·∫¶N TOKEN)
# ========================================
# L∆∞u √Ω: Thay TOKEN_HERE b·∫±ng token th·∫≠t t·ª´ login
GET http://localhost:5000/api/auth/profile
Authorization: Bearer TOKEN_HERE
Content-Type: application/json

###

# Test xem profile kh√¥ng c√≥ token (s·∫Ω b√°o l·ªói)
GET http://localhost:5000/api/auth/profile
Content-Type: application/json

###

# Test xem profile v·ªõi token sai
GET http://localhost:5000/api/auth/profile
Authorization: Bearer wrong-token-here
Content-Type: application/json

# ========================================
# 4. TEST ƒêƒÇNG XU·∫§T (C·∫¶N TOKEN)
# ========================================
# L∆∞u √Ω: Thay TOKEN_HERE b·∫±ng token th·∫≠t t·ª´ login
POST http://localhost:5000/api/auth/logout
Authorization: Bearer TOKEN_HERE
Content-Type: application/json

###

# Test ƒëƒÉng xu·∫•t kh√¥ng c√≥ token (s·∫Ω b√°o l·ªói)
POST http://localhost:5000/api/auth/logout
Content-Type: application/json

# ========================================
# 5. TEST FLOW HO√ÄN CH·ªàNH
# ========================================
# B∆∞·ªõc 1: ƒêƒÉng k√Ω user m·ªõi
POST http://localhost:5000/api/auth/register
Content-Type: application/json

{
  "username": "demo_user",
  "email": "demo@email.com",
  "password": "123456",
  "fullName": "Demo User",
  "role": "student"
}

###

# B∆∞·ªõc 2: ƒêƒÉng nh·∫≠p ƒë·ªÉ l·∫•y token
POST http://localhost:5000/api/auth/login
Content-Type: application/json

{
  "email": "demo@email.com",
  "password": "123456"
}

###

# B∆∞·ªõc 3: Xem profile v·ªõi token
# Copy token t·ª´ response c·ªßa login ·ªü tr√™n
GET http://localhost:5000/api/auth/profile
Authorization: Bearer PASTE_TOKEN_HERE
Content-Type: application/json

###

# B∆∞·ªõc 4: ƒêƒÉng xu·∫•t
POST http://localhost:5000/api/auth/logout
Authorization: Bearer PASTE_TOKEN_HERE
Content-Type: application/json

# ========================================
# 6. TEST VALIDATION
# ========================================
# Test email kh√¥ng h·ª£p l·ªá
POST http://localhost:5000/api/auth/register
Content-Type: application/json

{
  "username": "invalid_email",
  "email": "invalid-email",
  "password": "123456",
  "fullName": "Invalid Email User"
}

###

# Test password qu√° ng·∫Øn
POST http://localhost:5000/api/auth/register
Content-Type: application/json

{
  "username": "short_password",
  "email": "short@email.com",
  "password": "123",
  "fullName": "Short Password User"
}

###

# Test username qu√° ng·∫Øn
POST http://localhost:5000/api/auth/register
Content-Type: application/json

{
  "username": "ab",
  "email": "short@email.com",
  "password": "123456",
  "fullName": "Short Username User"
}

# ========================================
# 7. TEST ROLE KH√ÅC NHAU
# ========================================
# Test ƒëƒÉng k√Ω v·ªõi role teacher
POST http://localhost:5000/api/auth/register
Content-Type: application/json

{
  "username": "teacher_user",
  "email": "teacher@email.com",
  "password": "123456",
  "fullName": "Teacher User",
  "role": "teacher"
}

###

# Test ƒëƒÉng k√Ω v·ªõi role admin
POST http://localhost:5000/api/auth/register
Content-Type: application/json

{
  "username": "admin_user",
  "email": "admin@email.com",
  "password": "123456",
  "fullName": "Admin User",
  "role": "admin"
}

# ========================================
# H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:
# ========================================
# 1. C√†i extension "REST Client" trong VS Code
# 2. M·ªü file n√†y
# 3. Click "Send Request" ·ªü tr√™n m·ªói request
# 4. Xem k·∫øt qu·∫£ ·ªü tab m·ªõi
# 5. Copy token t·ª´ login ƒë·ªÉ test profile/logout
# 6. S·ª≠a URL n·∫øu server ch·∫°y ·ªü port kh√°c
# 7. S·ª≠a email/username ƒë·ªÉ test nhi·ªÅu tr∆∞·ªùng h·ª£p

# ========================================
# L∆ØU √ù QUAN TR·ªåNG:
# ========================================
# - ƒê·∫£m b·∫£o server ƒëang ch·∫°y (npm run dev)
# - ƒê·∫£m b·∫£o MongoDB ƒëang ch·∫°y
# - Thay TOKEN_HERE b·∫±ng token th·∫≠t
# - Test t·ª´ng request m·ªôt ƒë·ªÉ d·ªÖ debug
# - Xem response status v√† body ƒë·ªÉ ki·ªÉm tra
